const ChallengeFromCSV={start:(e,t,a)=>{ChallengeFromCSV.fileParse(e).then(e=>ChallengeFromCSV.sendData(e,t,a))},sendData:(e,t,a)=>ChallengeFromCSV.postRequest("https://habitica.com/api/v3/challenges",t,a,e.Cdata).then(s=>(ChallengeFromCSV.postRequest("https://habitica.com/api/v3/tasks/challenge/"+JSON.parse(s).data.id,t,a,e.tArray),JSON.parse(s).data.id)),postRequest:(e,t,a,s={})=>new Promise((n,i)=>{let l=new XMLHttpRequest;l.open("POST",e),l.onerror=function(){i(this.responseText)},l.onload=function(){201===l.status?n(this.responseText):i(this.responseText)},l.setRequestHeader("Content-Type","application/json;charset=UTF-8"),l.setRequestHeader("x-client","d2195ddc-a540-4dad-b3d5-34fb1ba8d319-cfc"),l.setRequestHeader("x-api-user",t),l.setRequestHeader("x-api-key",a),l.send(JSON.stringify(s))}),fileParse:e=>new Promise(function(t,a){let s=e.files;s.length>1&&a("Multiple files selected!");let n=s[0],i=new FileReader;i.readAsText(n),i.onload=function(e){let s=e.target.result,n=s.split("\r\n");n.length<6&&a({title:"Invalid CSV",message:`Not enough lines in file for challenge! Text: \n        ${s}`});let i={group:n[4],name:n[0],shortName:n[1],summary:n[2],description:n[3],prize:n[5]},l=[];for(let e=6;e<n.length;e++){let t=n[e].split(";");if(1!==t.length){t.length<4&&a({title:"Invalid CSV",message:`Not enough Items in line for Task! Task Text: \n            ${n[e]}`});let s={type:t[0],text:t[1],notes:t[2]},i=1;switch(t[3]){case"Trivial":i=.1;break;case"Easy":i=1;break;case"Medium":i=1.5;break;case"Hard":i=2}switch(t[0]){case"habit":t.length<5&&a({title:"Invalid CSV",message:`Not enough Items in line for Task of type "habit"! Task Text: \n                    ${n[e]}`}),s=Object.assign({priority:i,startDate:t[4]},s);break;case"daily":switch(t.length<7&&a({title:"Invalid CSV",message:`Not enough Items in line for Task of type "daily"! Task Text:\n                    ${n[e]}`}),s=Object.assign({priority:i,frequency:t[5],startDate:t[4]},s),t[5]){case"daily":s=Object.assign({everyX:t[6]||1},s);break;case"weekly":{let e=t[6].split(","),n={};for(let t=0;t<e.length;t++)["m","t","w","th","f","s","su"].includes(e[t])||a({title:`Unknown weekday "${e[t]}"`,message:'Valid weekdays: "m" (Monday), "t" (Tuesday), "w" (Wednesday), "th" (Thursday), "f" (Friday), "s" (Saturday), "su" (Sunday)'}),n[e[t]]=!1;s=Object.assign({repeat:n},s);break}case"monthly":{let e=t[6].split(","),a={};for(let t=0;t<e.length;t++)a[e[t]]=!1;if(0==t[7]){let e=t[8].split(",");s=Object.assign({repeat:a,daysOfMonth:e},s)}else{let e=t[8].split(",");s=Object.assign({repeat:a,weeksOfMonth:e},s)}break}case"yearly":s=Object.assign({everyX:t[6]||1},s);break;default:a({title:`Unknown frequency type (task type daily) "${t[5]}"`,message:'Valid frequency types: "daily", "weekly", "monthly", "yearly"'})}case"todo":t.length<5&&a({title:"Invalid CSV",message:`Not enough Items in line for Task of type "todo"! Task Text: \n                    ${n[e]}`}),s=Object.assign({priority:i,date:t[4]},s);break;case"reward":s=Object.assign({value:t[3]},s);break;default:a({title:`Unknown task type "${t[0]}"`,message:'Valid types (comma seperated): "habit", "daily", "todo", "reward"'})}l.push(s)}}t({Cdata:i,tArray:l})}})};